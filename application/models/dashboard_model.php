<?php class Dashboard_model extends CI_Model {		public function __construct()	{		parent::__construct();	}			function utilisationStation(){				$tab=array();		$mask = explode(" ",DATE_MASK);		$maskDate = str_replace('yyyy','Y',str_replace('mm','m',str_replace('dd','d',$mask[0])));		for($i=7;$i>=0;$i--){			$date = strtotime("-".$i." day");			$tab[date('d/m/Y',$date)]=$this->getTypeLogDate(date($maskDate,$date));		}				return $tab;	}		function alterSessionDateFormat(){						$query = $this->db->query('ALTER SESSION SET NLS_DATE_FORMAT = "'. NLS_DATE_FORMAT .'"');					$query = $this->db->query('ALTER SESSION SET NLS_TIMESTAMP_FORMAT = "'. NLS_TIMESTAMP_FORMAT .'"');				}		function getTypeLogDate($date){		$tab=array();		$tab['INSERT']=$this->db->get_where('QC1_REP_LOG',array('ACTION'=>'INSERT','EXECUTION_DATE >= '=>$date.' 00:00:00','EXECUTION_DATE <= '=>$date.' 23:59:59'))->num_rows();		$tab['UPDATE']=$this->db->get_where('QC1_REP_LOG',array('ACTION'=>'UPDATE','EXECUTION_DATE >= '=>$date.' 00:00:00','EXECUTION_DATE <= '=>$date.' 23:59:59'))->num_rows();		$tab['DELETE']=$this->db->get_where('QC1_REP_LOG',array('ACTION'=>'DELETE','EXECUTION_DATE >= '=>$date.' 00:00:00','EXECUTION_DATE <= '=>$date.' 23:59:59'))->num_rows();		return $tab;	}		function timeLine(){		$date =  strtotime("-10 day");		$mask = explode(" ",DATE_MASK);		$maskDate = str_replace('yyyy','Y',str_replace('mm','m',str_replace('dd','d',$mask[0])));				$this->db->join('QC1_REP_SEC_USER','QC1_REP_SEC_USER.CODE_USER=QC1_REP_LOG.CODE_USER');		$this->db->select('FULLNAME,TABLE_IMPACTED,ACTION,EXECUTION_DATE');		$this->db->order_by('EXECUTION_DATE','DESC');		$this->db->where("(ACTION='INSERT' OR ACTION='UPDATE')");		$this->db->where("(TABLE_IMPACTED='QC1_REP_PRI_INDICATOR' OR TABLE_IMPACTED='QC1_REP_MTA_EXTENSION')");		return $this->db->get_where('QC1_REP_LOG',array('EXECUTION_DATE >='=>date($maskDate,$date)." 00:00:00"))->result();	}		function infoArchive(){		$infoArchive  = array();				//Dernier chargement		$this->db->select('DAT_LAST_RUN');		$this->db->order_by('DAT_LAST_RUN','DESC');			$lastChargement = $this->db->get('QC1_REP_ARC_DEFINITION')->result();		$infoArchive['lastChargement'] = $lastChargement[0]->DAT_LAST_RUN;				//Prochain chargement		$this->db->select('DAT_NEXT_RUN');		$this->db->order_by('DAT_NEXT_RUN','ASC');		$lastChargement = $this->db->get_where('QC1_REP_ARC_DEFINITION',array('DAT_NEXT_RUN >='=>dateSqlNow()))->result();		$infoArchive['nextChargement'] = $lastChargement[0]->DAT_NEXT_RUN;				//Prochaine Purge		$this->db->select('DAT_NEXT_DEL');		$this->db->order_by('DAT_NEXT_DEL','ASC');		$lastChargement = $this->db->get_where('QC1_REP_ARC_DEFINITION',array('DAT_NEXT_DEL >='=>dateSqlNow()))->result();		$infoArchive['nextPurge'] = $lastChargement[0]->DAT_NEXT_DEL;				//NB Totale		$infoArchive['nbTotal'] = $this->db->get('QC1_REP_ARC_DEFINITION')->num_rows();				return $infoArchive;	}		function regroupementHistogramme(){				$tabRegroupement=array();						$this->load->model('referentiels_model');		$this->db->select('CODE_EXTENSION');		$listeRegroupements = $this->db->get('QC1_REP_MTA_EXTENSION')->result();		$listeAttr = array(					'CODE_SRC_ATTR_01','CODE_SRC_ATTR_02','CODE_SRC_ATTR_03','CODE_SRC_ATTR_04','CODE_SRC_ATTR_05',                	'CODE_SRC_ATTR_06','CODE_SRC_ATTR_07','CODE_SRC_ATTR_08','CODE_SRC_ATTR_09','CODE_SRC_ATTR_10',                	'CODE_SRC_ATTR_11','CODE_SRC_ATTR_12','CODE_SRC_ATTR_13','CODE_SRC_ATTR_14','CODE_SRC_ATTR_15',                	'CODE_SRC_ATTR_16','CODE_SRC_ATTR_17','CODE_SRC_ATTR_18','CODE_SRC_ATTR_19','CODE_SRC_ATTR_20',                	'CODE_EXT_ATTR_01','CODE_EXT_ATTR_02','CODE_EXT_ATTR_03','CODE_EXT_ATTR_04','CODE_EXT_ATTR_05',                	'CODE_EXT_ATTR_06','CODE_EXT_ATTR_07','CODE_EXT_ATTR_08','CODE_EXT_ATTR_09','CODE_EXT_ATTR_10',                	'CODE_EXT_ATTR_11','CODE_EXT_ATTR_12','CODE_EXT_ATTR_13','CODE_EXT_ATTR_14','CODE_EXT_ATTR_15',                	'CODE_EXT_ATTR_16','CODE_EXT_ATTR_17','CODE_EXT_ATTR_18','CODE_EXT_ATTR_19','CODE_EXT_ATTR_20');				foreach($listeRegroupements as $regroupement){			$infoRegroupement = $this->referentiels_model->infoRegroupement($regroupement->CODE_EXTENSION);			$listeAttrRegroupement=array();			foreach($listeAttr as $attr){				if($infoRegroupement->$attr!=0 && $infoRegroupement->$attr!=NULL){					$listeAttrRegroupement[count($listeAttrRegroupement)]=str_replace('CODE_','',$attr)."_VALUE";				}			}			$nbLigne=0;			foreach($infoRegroupement->listeRules as $rules){				$nbRules=0;				foreach($listeAttrRegroupement as $attr){					if($rules->$attr==NULL || $rules->$attr=="Non défini")					$nbRules++;				}				if($nbRules>0){					$nbLigne++;				}			}			$tabRegroupement[count($tabRegroupement)]=array('name'=>$infoRegroupement->NAME_EXTENSION,'nbLignes'=>$nbLigne,'nbRules'=>count($infoRegroupement->listeRules));		}				return $tabRegroupement;	}			function elementsQuantitafifs(){		$quantitatif = array();		//Nombre de regroupements		$quantitatif['nbRegroupements'] = $this->db->get('QC1_REP_MTA_EXTENSION')->num_rows();		//Nombre d’anciennetés		$quantitatif['nbAnciennetes'] = $this->db->get('QC1_REP_SEN_FIELDS')->num_rows();		//Nombre de tranches		$quantitatif['nbTranches'] = $this->db->get('QC1_REP_SLC_DEFINITION')->num_rows();		//Nombre de mobilités		$quantitatif['nbMobilites'] = $this->db->get('QC1_REP_MBI_INDICATOR')->num_rows();		//Nombre d’archives		$quantitatif['nbArchives'] = $this->db->get('QC1_REP_ARC_DEFINITION')->num_rows();		return $quantitatif;	}		function indicateursPaieDonut(){		$this->db->select('DESC_TYPE,count(*) as NB');		$this->db->group_by('DESC_TYPE');		return $this->db->get('QC1_REP_PRI_INDICATOR')->result();	}}?>
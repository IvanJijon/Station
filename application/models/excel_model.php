<?phpclass Excel_model extends CI_Model {	public function __construct()	{		parent::__construct();		$this->load->library('excel');	}	function writeData($file,$titre,$data){		//Gestion du titre		$this->excel->getActiveSheet()->setTitle($titre);		//Gestion de la taille de la police par défaut		$this->excel->getActiveSheet()->getDefaultStyle()->getFont()->setSize(9);		//Gestion de la police par défaut		$this->excel->getActiveSheet()->getDefaultStyle()->getFont()->setName('helvetica');		// Pour toutes les lignes		for($i=0;$i<$data['numRows'];$i++){			//Pour toutes les colonnes			for($j=0;$j<$data['numCols'];$j++){				//On répercute les données en sachant que chr($j + ord('A')) donne une lettre de l'alphabet pour les colonnes excel				$this->excel->getActiveSheet()->setCellValue(chr($j + ord('A')).($i+1),$data['data'][$i][$j]);				//On centre le contenu de la cellule				$this->excel->getActiveSheet()->getStyle(chr($j + ord('A')).($i+1))->applyFromArray(array('alignment'=>array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,'vertical'=>PHPExcel_Style_Alignment::VERTICAL_TOP)));				// Si je suis au entête				if($i==0){					// On met en gras le contenu de la cellule					$this->excel->getActiveSheet()->getStyle(chr($j + ord('A')).($i+1))->getFont()->setBold(true);					// On ajoute une bordure bottom à la cellule					$this->excel->getActiveSheet()->getStyle(chr($j + ord('A')).($i+1))->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);				}				// On spécifie une couleur de background une ligne sur 2				if($i%2==0){					$this->excel->getActiveSheet()->getStyle(chr($j + ord('A')).($i+1))->applyFromArray(					    array(					        'fill' => array(					            'type' => PHPExcel_Style_Fill::FILL_SOLID,					            'color' => array('rgb' => 'CEDFF5')					        )					    )					);				}			}		}		//Pour chaque colonne		for($j=0;$j<$data['numCols'];$j++){			// On calcule automatiquement la largeur de la colonne		 	$this->excel->getActiveSheet()->getColumnDimension(chr($j + ord('A')))->setAutoSize(true);		}		header('Content-Type: application/vnd.ms-excel'); //mime type		header('Content-Disposition: attachment;filename="'.$file.'"'); //tell browser what's the file name		header('Cache-Control: max-age=0'); //no cache		// Création du fichier excel au format xls		$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');		$objWriter->save('php://output');		}	function getData($file){		try {		    //$inputFileType = PHPExcel_IOFactory::identify($file);		    $objReader = PHPExcel_IOFactory::createReader("Excel5");		    $objPHPExcel = $objReader->load($file);		} catch(Exception $e) {		    die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());		}		//  Get worksheet dimensions		$sheet = $objPHPExcel->getSheet(0); 		$highestRow = $sheet->getHighestRow(); 		$highestColumn = $sheet->getHighestColumn();		$data = array();		$data['numRows']= $highestRow;		$data['numCols']=PHPExcel_Cell::columnIndexFromString($highestColumn);		//  Loop through each row of the worksheet in turn		for ($row = 1; $row <= $highestRow; $row++){ 		    //  Read a row of data into an array		    $d= $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row,		                                    NULL,		                                    TRUE,		                                    FALSE);   		    $data['data'][$row]=$d[0];		}		return $data;	}	function getSRCFiles($file){		try {		    //$inputFileType = PHPExcel_IOFactory::identify($file);		    $objReader = PHPExcel_IOFactory::createReader("Excel5");		    $objPHPExcel = $objReader->load($file);		} catch(Exception $e) {		    die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());		}		//  Get worksheets dimensions		$sheetFiles = $objPHPExcel->getSheet(0); // Fichiers		$highestRowFiles = $sheetFiles->getHighestRow(); 		$highestColumnFiles = $sheetFiles->getHighestColumn();		$dataFiles = array();				$sheetFields = $objPHPExcel->getSheet(1); // Champs		$highestRowFields = $sheetFields->getHighestRow(); 		$highestColumnFields = $sheetFields->getHighestColumn();		$dataFields = array();				$dataFiles['numRows']= $highestRowFiles;		$dataFiles['numCols']=PHPExcel_Cell::columnIndexFromString($highestColumnFiles);				$dataFields['numRows']= $highestRowFields;		$dataFields['numCols']=PHPExcel_Cell::columnIndexFromString($highestColumnFields);				$data = array();				// Loop through each row of the Files worksheet (0) in turn		// On commence à la 1ère ligne - ligne d'entête		for ($rowFiles = 2; $rowFiles <= $highestRowFiles; $rowFiles++){ 		    //  Read a row of data into an array		    $dFile = $sheetFiles->rangeToArray('A' . $rowFiles . ':' . $highestColumnFiles . $rowFiles,		                                    NULL,		                                    TRUE,		                                    FALSE);   		    $dataFiles['dataFiles'][$rowFiles]=$dFile[0];		    $currentFileCode = $dataFiles['dataFiles'][$rowFiles][0];				$data[$currentFileCode]['File']['CODE_FILE'] = $dataFiles['dataFiles'][$rowFiles][0];						$data[$currentFileCode]['File']['CODE_CONN'] = $dataFiles['dataFiles'][$rowFiles][1];						$data[$currentFileCode]['File']['CODE_DOMAIN'] = $dataFiles['dataFiles'][$rowFiles][2];						$data[$currentFileCode]['File']['NAME_FILE'] = $dataFiles['dataFiles'][$rowFiles][3];						$data[$currentFileCode]['File']['DESC_FILE'] = $dataFiles['dataFiles'][$rowFiles][4];						$data[$currentFileCode]['File']['FILEPATH'] = $dataFiles['dataFiles'][$rowFiles][5];						$data[$currentFileCode]['File']['FLG_OPTIONAL'] = $dataFiles['dataFiles'][$rowFiles][6];						$data[$currentFileCode]['File']['FLG_DUPLICATE'] = $dataFiles['dataFiles'][$rowFiles][7];						$data[$currentFileCode]['File']['FLG_HIST'] = $dataFiles['dataFiles'][$rowFiles][8];						$data[$currentFileCode]['File']['FLG_CVT'] = $dataFiles['dataFiles'][$rowFiles][9];						$data[$currentFileCode]['File']['CODE_ORIGIN'] = $dataFiles['dataFiles'][$rowFiles][10];												// Loop through each row of the Fields worksheet (1) in turn			// On commence à lire à partir de la ligne des données			for ($rowFields = 2; $rowFields <= $highestRowFields; $rowFields++){ 								$dField = $sheetFields->rangeToArray('A' . $rowFields . ':' . $highestColumnFields . $rowFields,		                                    NULL,		                                    TRUE,		                                    FALSE);															$dataFields['dataFields'][$rowFields]=$dField[0];				if ($currentFileCode == $dataFields['dataFields'][$rowFields][1]){					$data[$currentFileCode]['Fields'][$rowFields-1]['CODE_FILE'] = $dataFields['dataFields'][$rowFields][1];					$data[$currentFileCode]['Fields'][$rowFields-1]['NAME_FIELD'] = $dataFields['dataFields'][$rowFields][2];					$data[$currentFileCode]['Fields'][$rowFields-1]['TYPE_FIELD'] = $dataFields['dataFields'][$rowFields][3];					$data[$currentFileCode]['Fields'][$rowFields-1]['INDEX_FIELD'] = $dataFields['dataFields'][$rowFields][4];					$data[$currentFileCode]['Fields'][$rowFields-1]['FLG_DAT_BEG_HIST'] = $dataFields['dataFields'][$rowFields][5];					$data[$currentFileCode]['Fields'][$rowFields-1]['FLG_DAT_END_HIST'] = $dataFields['dataFields'][$rowFields][6];					$data[$currentFileCode]['Fields'][$rowFields-1]['FLG_UNQ_KEY'] = $dataFields['dataFields'][$rowFields][7];				}						}		}				return $data;	}	function exportSRCFiles($data){				$objPHPExcel = new PHPExcel(); 				$listeSimpleFichiersSource = (array) $data['listeSimpleFichiersSource'];		$listeSimpleChampsFichiersSource = (array) $data['listeSimpleChampsFichiersSource'];				for($sheet=0;$sheet<2;$sheet++){			$objPHPExcel->setActiveSheetIndex($sheet); 						// Saisie des FILES			if($sheet==0){				$objPHPExcel->getActiveSheet()->setTitle('QC1_REP_SRC_FILE');				// Gestion Entete				$entete = array("CODE_FILE", "CODE_CONN", "CODE_DOMAIN", "NAME_FILE", "DESC_FILE", "FILEPATH", "FLG_OPTIONAL", "FLG_DUPLICATE", "FLG_HIST", "FLG_CVT", "CODE_ORIGIN");				$objPHPExcel->getActiveSheet()->fromArray($entete, null, 'A1');				// Insertion données				for ($row=0; $row < count($data['listeSimpleFichiersSource']); $row++){										$objPHPExcel->getActiveSheet()->fromArray((array)$data['listeSimpleFichiersSource'][$row], null, 'A'.($row+2));				}				$objPHPExcel->createSheet();			}			// Saisie des FIELDS			if($sheet==1){				$objPHPExcel->getActiveSheet()->setTitle('QC1_REP_SRC_FIELD');				// Gestion Entete				$entete = array("CODE_FIELD", "CODE_FILE", "NAME_FIELD", "TYPE_FIELD", "INDEX_FIELD", "FLG_DAT_BEG_HIST", "FLG_DAT_END_HIST", "FLG_UNQ_KEY");				$objPHPExcel->getActiveSheet()->fromArray($entete, null, 'A1');								for ($row=0; $row < count($data['listeSimpleChampsFichiersSource']); $row++){					$objPHPExcel->getActiveSheet()->fromArray((array)$data['listeSimpleChampsFichiersSource'][$row], null, 'A'.($row+2));								}			}						// Style			$highestColumn = PHPExcel_Cell::columnIndexFromString($objPHPExcel->getActiveSheet()->getHighestColumn());			//Gestion de la taille de la police par défaut			$objPHPExcel->getActiveSheet()->getDefaultStyle()->getFont()->setSize(11);			//Gestion de la police par défaut			$objPHPExcel->getActiveSheet()->getDefaultStyle()->getFont()->setName('helvetica');						//Pour chaque colonne			for($j=0; $j < $highestColumn; $j++){				// On calcule automatiquement la largeur de la colonne				$objPHPExcel->getActiveSheet()->getColumnDimension(chr($j + ord('A')))->setAutoSize(true);						}						//  Get worksheets dimensions			$highestRow = $objPHPExcel->getSheet($sheet)->getHighestRow(); 			$highestColumn = PHPExcel_Cell::columnIndexFromString($objPHPExcel->getSheet($sheet)->getHighestColumn());						// Bordures			$styleArray = array(				'borders' => array(					'allborders' => array(						'style' => PHPExcel_Style_Border::BORDER_THIN					)				)			);						for ($row = 1; $row < $highestRow+1; $row++){				for ($col = 0; $col < $highestColumn; $col++){										$objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($col, $row)->applyFromArray($styleArray) ;				}			}		}		// On se repositionne sur la première page		$objPHPExcel->setActiveSheetIndex(0);				// Nom du fichier		$file="FILE_SRC_EXPORT.xls";				header('Content-Type: application/vnd.ms-excel'); //mime type		header('Content-Disposition: attachment;filename="'.$file.'"'); //tell browser what's the file name		header('Cache-Control: max-age=0'); //no cache						// Création du fichier excel au format xls		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');		$objWriter->save('php://output');				}	}?>